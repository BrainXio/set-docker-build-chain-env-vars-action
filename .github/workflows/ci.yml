name: Continuous Integration

on:
  pull_request:
    paths:
      - '**/*.js'
      - '**/*.yml'
  push:
    tags:
      - 'v*.*.*'

jobs:
  sync-version:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get latest Git tag
        id: git_tag
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "tag=$tag" >> $GITHUB_ENV
          echo "tag: $tag" > latest_git_tag.txt

      - name: Upload Git tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-git-tag
          path: latest_git_tag.txt

      - name: Get version from package.json
        id: package_version
        run: |
          version=$(node -p "require('./package.json').version")
          echo "version=$version" >> $GITHUB_ENV
          echo "version: $version" > package_version.txt

      - name: Upload package version artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-version
          path: package_version.txt

      - name: Compare versions
        id: compare_versions
        run: |
          if [ "${{ env.tag }}" != "v${{ env.version }}" ]; then
            echo "Version mismatch: Git tag is ${{ env.tag }} but package.json version is v${{ env.version }}."
            echo "needs_update=true" >> $GITHUB_ENV
            echo "needs_update: true" > needs_update.txt
          else
            echo "Versions match: ${{ env.tag }}"
            echo "needs_update=false" >> $GITHUB_ENV
            echo "needs_update: false" > needs_update.txt
          fi

      - name: Upload comparison result artifact
        uses: actions/upload-artifact@v4
        with:
          name: needs-update
          path: needs_update.txt

      - name: Update package.json version and author
        if: env.needs_update == 'true'
        run: |
          echo "Updating package.json version to match Git tag"
          node -e "let pkg=require('./package.json'); pkg.version='${{ env.tag }}'.substring(1); pkg.author='Your Name <your.email@example.com>'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: sync package.json version with tag ${{ env.tag }}"
          git push origin HEAD:main

      - name: Upload updated package.json artifact
        if: env.needs_update == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-package-json
          path: package.json

  lint-and-quality-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Install ESLint
        run: npm install eslint

      - name: Run ESLint
        run: |
          npx eslint . > eslint_output.txt
        continue-on-error: true

      - name: Upload ESLint output
        uses: actions/upload-artifact@v4
        with:
          name: eslint-output
          path: eslint_output.txt

      - name: Run security audit
        run: npm audit --audit-level=moderate > npm_audit_output.txt

      - name: Upload npm audit output
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-output
          path: npm_audit_output.txt

      - name: Run tests
        run: npm test > test_output.txt

      - name: Upload test output
        uses: actions/upload-artifact@v4
        with:
          name: test-output
          path: test_output.txt

  update-dependencies:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Update dependencies
        run: npm update > update_output.txt

      - name: Upload update output
        uses: actions/upload-artifact@v4
        with:
          name: update-output
          path: update_output.txt

      - name: Commit updated dependencies
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package-lock.json
          git commit -m "chore: update dependencies"
          git push origin HEAD:main
