name: Version Control System Automation

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'

jobs:
  predict_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run Set Docker Build Chain Env Vars Action
        id: set-env-vars
        uses: ./
        with:
          image_base: 'nvidia/cuda'
          image_version: '12.5.6-base-ubuntu22.04'
          artifact_suffix: vcs
          prefix: 'custom'

      - name: Create next-version artifact
        run: echo "NEXT_VERSION=${{ steps.set-env-vars.outputs.NEXT_VERSION }}" > next_version.txt

      - name: Upload next-version artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-version
          path: next_version.txt

  update_package_and_changelog:
    runs-on: ubuntu-latest
    needs: predict_version
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Download next-version artifact
        uses: actions/download-artifact@v4
        with:
          name: next-version
          path: .

      - name: Check commit message
        id: check_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          if [[ "$COMMIT_MESSAGE" == release* ]]; then
            echo "Release commit detected"
            echo "RELEASE_COMMIT=true" >> $GITHUB_ENV
          else
            echo "Not a release commit"
            echo "RELEASE_COMMIT=false" >> $GITHUB_ENV

      - name: Update package.json and CHANGELOG.md
        if: env.RELEASE_COMMIT == 'true'
        run: |
          NEXT_VERSION=$(cat next_version.txt)
          echo "Updating package.json version to $NEXT_VERSION and setting author to ${{ github.actor }}"
          node -e "let pkg=require('./package.json'); pkg.version='$NEXT_VERSION'.substring(1); pkg.author='${{ github.actor }}'; require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));"
          echo "Updating CHANGELOG.md"
          echo "## $NEXT_VERSION - $(date +'%Y-%m-%d')" >> CHANGELOG.md
          echo "- Released by ${{ github.actor }}" >> CHANGELOG.md
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package.json CHANGELOG.md
          git commit -m "chore: release $NEXT_VERSION"
          git tag $NEXT_VERSION
          git push origin main --tags

      - name: Print NEXT_VERSION
        run: echo "NEXT_VERSION=$(cat next_version.txt)"
